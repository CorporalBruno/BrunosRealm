explorer:
  type: world
  debug: false
  events:
    on save-all command:
    - choose <player.is_op>:
      - case true:
        - wait 15t
        - execute as_op "denizen save"
        - wait 15t
        - execute as_op "citizens save"
    on player opens inventory:
    - define p_enderchest <player.enderchest>
    - if <context.inventory> == %p_enderchest% {
      - narrate "true <context.inventory.id_type>"
      }
    on player closes inventory:
    - if <player.has_flag[safe_cancel]> {
      - wait 1t
      - inventory open d:<context.inventory>
      }
    on entity creates portal:
    - choose <context.portal_type>:
      - case ENDER:
        - determine cancelled
    on player enters world_key_1:
    - choose <player.flag[world_key_1]||false>:
      - case true:
        - narrate "<&5>Hermes<&f> I haven't seen <&5>Chaos<&f> around lately."
      - case false:
        - execute as_op "crate givekey <player.name> RouletteKey 1"
        - flag <player> world_key:++
        - wait 1t
        - flag <player> world_key_1 duration:1w
        - announce "<&5>Chaos<&f> <player.name> found a Chaos Key."
      - default:
        - execute as_op "crate givekey <player.name> RouletteKey 1"
        - flag <player> world_key:++
        - wait 1t
        - flag <player> world_key_1 duration:1w
        - announce "<&5>Chaos<&f> <player.name> found a Chaos Key."
    on player enters world_key_2:
    - choose <player.flag[world_key_2]||false>:
      - case true:
        - narrate "<&5>Hermes<&f> I haven't seen <&5>Chaos<&f> around lately."
      - case false:
        - execute as_op "crate givekey <player.name> RouletteKey 1"
        - flag <player> world_key:++
        - wait 1t
        - flag <player> world_key_2 duration:1w
        - announce "<&5>Chaos<&f> <player.name> found a Chaos Key."
      - default:
        - execute as_op "crate givekey <player.name> RouletteKey 1"
        - flag <player> world_key:++
        - wait 1t
        - flag <player> world_key_2 duration:1w
        - announce "<&5>Chaos<&f> <player.name> found a Chaos Key."
    on player enters world_key_3:
    - choose <player.flag[world_key_3]||false>:
      - case true:
        - narrate "<&5>Hermes<&f> I haven't seen <&5>Chaos<&f> around lately."
      - case false:
        - execute as_op "crate givekey <player.name> RouletteKey 1"
        - flag <player> world_key:++
        - wait 1t
        - flag <player> world_key_3 duration:1w
        - announce "<&5>Chaos<&f> <player.name> found a Chaos Key."
      - default:
        - execute as_op "crate givekey <player.name> RouletteKey 1"
        - flag <player> world_key:++
        - wait 1t
        - flag <player> world_key_3 duration:1w
        - announce "<&5>Chaos<&f> <player.name> found a Chaos Key."
    on player enters ussf_lookout:
    - choose <player.flag[ussf_lookout_key]||false>:
      - case true:
        - narrate "<&5>Hermes<&f> I haven't seen <&5>Chaos<&f> around lately."
      - case false:
        - execute as_op "crate givekey <player.name> RouletteKey 1"
        - flag <player> ussf_lookout:++
        - wait 1t
        - flag <player> ussf_lookout_key duration:1w
        - announce "<&5>Chaos<&f> <player.name> found a Chaos Key."
      - default:
        - execute as_op "crate givekey <player.name> RouletteKey 1"
        - flag <player> ussf_lookout:++
        - wait 1t
        - flag <player> ussf_lookout_key duration:1w
        - announce "<&5>Chaos<&f> <player.name> found a Chaos Key."
    on player enters manhattan_key_marriot:
    - choose <player.flag[manhattan_key_marriot]||false>:
      - case true:
        - narrate "<&5>Hermes<&f> I haven't seen <&5>Chaos<&f> around lately."
      - case false:
        - execute as_op "crate givekey <player.name> RouletteKey 1"
        - flag <player> manhattan_marriot:++
        - wait 1t
        - flag <player> manhattan_key_marriot duration:1w
        - announce "<&5>Chaos<&f> <player.name> found a Chaos Key."
      - default:
        - execute as_op "crate givekey <player.name> RouletteKey 1"
        - flag <player> manhattan_marriot:++
        - wait 1t
        - flag <player> manhattan_key_marriot duration:1w
        - announce "<&5>Chaos<&f> <player.name> found a Chaos Key."
    on player enters zombie_apoc_key_1:
    - choose <player.flag[zombie_apoc_key_1]||false>:
      - case true:
        - narrate "<&5>Hermes<&f> I haven't seen <&5>Chaos<&f> around lately."
      - case false:
        - execute as_op "crate givekey <player.name> RouletteKey 1"
        - flag <player> zombie_apoc_key:++
        - wait 1t
        - flag <player> zombie_apoc_key_1 duration:1w
        - announce "<&5>Chaos<&f> <player.name> found a Chaos Key."
      - default:
        - execute as_op "crate givekey <player.name> RouletteKey 1"
        - flag <player> zombie_apoc_key:++
        - wait 1t
        - flag <player> zombie_apoc_key_1 duration:1w
        - announce "<&5>Chaos<&f> <player.name> found a Chaos Key."
    on player enters zombie_apoc_key_2:
    - choose <player.flag[zombie_apoc_key_2]||false>:
      - case true:
        - narrate "<&5>Hermes<&f> I haven't seen <&5>Chaos<&f> around lately."
      - case false:
        - execute as_op "crate givekey <player.name> RouletteKey 1"
        - flag <player> zombie_apoc_key:++
        - wait 1t
        - flag <player> zombie_apoc_key_2 duration:1w
        - announce "<&5>Chaos<&f> <player.name> found a Chaos Key."
      - default:
        - execute as_op "crate givekey <player.name> RouletteKey 1"
        - flag <player> zombie_apoc_key:++
        - wait 1t
        - flag <player> zombie_apoc_key_2 duration:1w
        - announce "<&5>Chaos<&f> <player.name> found a Chaos Key."
    on player enters zombie_apoc_key_3:
    - choose <player.flag[zombie_apoc_key_3]||false>:
      - case true:
        - narrate "<&5>Hermes<&f> I haven't seen <&5>Chaos<&f> around lately."
      - case false:
        - execute as_op "crate givekey <player.name> RouletteKey 1"
        - flag <player> zombie_apoc_key:++
        - wait 1t
        - flag <player> zombie_apoc_key_3 duration:1w
        - announce "<&5>Chaos<&f> <player.name> found a Chaos Key."
      - default:
        - execute as_op "crate givekey <player.name> RouletteKey 1"
        - flag <player> zombie_apoc_key:++
        - wait 1t
        - flag <player> zombie_apoc_key_3 duration:1w
        - announce "<&5>Chaos<&f> <player.name> found a Chaos Key."
    on player enters zombie_apoc_key_4:
    - choose <player.flag[zombie_apoc_key_4]||false>:
      - case true:
        - narrate "<&5>Hermes<&f> I haven't seen <&5>Chaos<&f> around lately."
      - case false:
        - execute as_op "crate givekey <player.name> RouletteKey 1"
        - flag <player> zombie_apoc_key:++
        - wait 1t
        - flag <player> zombie_apoc_key_4 duration:1w
        - announce "<&5>Chaos<&f> <player.name> found a Chaos Key."
      - default:
        - execute as_op "crate givekey <player.name> RouletteKey 1"
        - flag <player> zombie_apoc_key:++
        - wait 1t
        - flag <player> zombie_apoc_key_4 duration:1w
        - announce "<&5>Chaos<&f> <player.name> found a Chaos Key."
    on player enters manhattan:
    - choose <server.list_worlds.formatted.contains[world_Manhattan]>:
      - case true:
        - teleport <player> <w@world_Manhattan.spawn_location>
        - narrate "<&5>Hermes<&f>Welcome to Manhattan. Type /warps to find a new location."
        - flag <player> world_manhattan:++
      - case false:
        - narrate "<&5>Hermes<&f> Wait 15 seconds while we bring back up the warp drives..."
        - createworld world_Manhattan
        - wait 15s
        - execute as_op 'pex world world_Manhattan inherit world'
        - wait 1t
        - execute as_op 'gamerule keepInventory true'
        - wait 1t
        - teleport <player> <w@world_Manhattan.spawn_location>
        - narrate "<&5>Hermes<&f> Welcome to Manhattan"
        - flag <player> world_manhattan:++
      - default:
        - narrate "<&5>Hermes<&f> Incredibly unlikely super eclipse has occurred and you have to start over...."
    on player enters dagar_wizardtowerdoor:
    - choose <player.has_flag[dagar_wizardtowerdoor]||false>:
      - case false:
        - flag <player> dagar_wizardtowerdoor:++
        - execute as_op "warp Camelot"
        - narrate "<&6>Hermes<&f> Welcome to Camelot, a magical time and place or place in time?"
      - case true:
        - flag <player> dagar_wizardtowerdoor:++
        - execute as_op "warp Camelot"
        - narrate "<&6>Hermes<&f> Welcome back to Camelot, you have traveled here <player.flag[dagar_wizardtowerdoor].round> times. Have you found a magic wand yet?"
      - default:
        - queue clear
    on player enters happilyeverafter:
    - choose <player.has_flag[happilyeverafter]||false>:
      - case false:
        - flag <player> happilyeverafter:++
      - case true:
        - flag <player> happilyeverafter:++
        - narrate "<&6>Hermes<&f> Welcome back to Happily Ever After, you have traveled here <player.flag[happilyeverafter].round> times. Have you found all the secret dungeons yet?"
      - default:
        - queue clear
    on player enters PalPatrolCityWarpDoor:
    - choose <player.gamemode>:
      - case SURVIVAL:
        - goto survival
      - case CREATIVE:
        - inventory close
        - narrate "<&5>Hermes<&b> You must be in survival mode."
        - queue clear
      - case ADVENTURE:
        - inventory close
        - narrate "<&5>Hermes<&b> You must be in survival mode."
        - queue clear
      - case SPECTATOR:
        - inventory close
        - narrate "<&5>Hermes<&b> You must be in survival mode."
        - queue clear
      - default:
        - inventory close
        - narrate "<&5>Hermes<&b> You must be in survival mode."
        - queue clear
    - mark survival
    - inventory close
    - choose <bungee.list_servers.formatted.contains[PalPatrol]||false>:
      - case true:
        - choose <bungee.server>:
          - case server@PalPatrol:
            - teleport <player> l@-11632,74,3847,world_themepark
            - Narrate '<&5>Hermes<&f> To bring the warp screen back up, simply type in chat: /warps'
            - queue clear
          - default:
            - goto sendplayer
        - mark sendplayer
        - define player <player>
        - define playername <player.name>
        - Narrate '<&5>Hermes<&f> To bring the warp screen back up, simply type in chat: /warps'
        - wait 1t
        - adjust <player> 'send_to:server@PalPatrol'
      - case false:
        - narrate "<&5>Hermes<&f> The Bifrost is currently offline... Please travel to a new destination."